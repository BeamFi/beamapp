// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type BeamId = Nat32;
type BeamId__2 = BeamId;
type BeamModel =
  {
    actualEndDate : ?Time__2;
    createdAt : Time__2;
    escrowId : EscrowId__1;
    id : BeamId;
    lastProcessedDate : Time__2;
    rate : Period;
    scheduledEndDate : Time__2;
    startDate : Time__2;
    status : BeamStatus;
    updatedAt : Time__2
  };
type BeamModel__2 = BeamModel;
type BeamStatus = {#active; #completed; #paused};
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type EscrowId = Nat32;
type EscrowId__1 = EscrowId;
type EscrowId__4 = EscrowId;
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Period = Nat32;
type Time = Int;
type Time__2 = Time;
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
actor {
  stable var beamStore :
    {
      #branch : Branch<BeamId__2, BeamModel__2>;
      #empty;
      #leaf : Leaf<BeamId__2, BeamModel__2>
    };
  stable var escrowBeamStore :
    {
      #branch : Branch<EscrowId__4, BeamId__2>;
      #empty;
      #leaf : Leaf<EscrowId__4, BeamId__2>
    };
  stable var nextBeamId : Nat32;
  stable var version : Nat32
};
