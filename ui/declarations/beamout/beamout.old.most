// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type BeamOutId = Nat32;
type BeamOutModel =
  {
    amount : TokenAmount;
    createdAt : Time__1;
    durationNumDays : Nat32;
    id : BeamOutId;
    recipient : Principal;
    tokenType : TokenType;
    updatedAt : Time__1
  };
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type Hash = Nat32;
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Time = Int;
type Time__1 = Time;
type TokenAmount = Nat64;
type TokenType = {#icp};
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
actor {
  stable var beamOutStore :
    {
      #branch : Branch<BeamOutId, BeamOutModel>;
      #empty;
      #leaf : Leaf<BeamOutId, BeamOutModel>
    }
};
