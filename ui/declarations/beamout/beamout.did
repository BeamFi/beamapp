type TokenType__1 = variant {icp;};
type TokenType = variant {icp;};
type TokenAmount__1 = nat64;
type TokenAmount = nat64;
type Time = int;
type Result_1 = 
 variant {
   err: ErrorCode;
   ok: BeamOutId;
 };
type Result = 
 variant {
   err: ErrorCode;
   ok: BeamOutModelV4;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   upgrade: bool;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type ErrorCode = 
 variant {
   duplicated_id: text;
   invalid_id: text;
   invalid_recipient: text;
 };
type BeamOutTypeV3 = 
 variant {
   meeting: BeamOutMeetingModelV3;
   payment;
 };
type BeamOutModelV4 = 
 record {
   amount: TokenAmount;
   beamOutType: BeamOutTypeV3;
   createdAt: Time;
   durationNumMins: nat32;
   id: BeamOutId__1;
   recipient: principal;
   tokenType: TokenType;
   updatedAt: Time;
 };
type BeamOutMeetingString__1 = text;
type BeamOutMeetingString = text;
type BeamOutMeetingModelV3 = 
 record {
   meetingId: BeamOutMeetingString;
   meetingPassword: text;
 };
type BeamOutId__1 = nat32;
type BeamOutId = nat32;
service : {
  createBeamOut: (TokenAmount__1, TokenType__1, principal, nat32) ->
   (Result_1);
  createBeamOutMeeting: (TokenAmount__1, TokenType__1, principal, nat32,
   BeamOutMeetingString__1, text) -> (Result_1);
  getActorBalance: () -> (nat) query;
  http_request: (HttpRequest) -> (HttpResponse) query;
  loadBeamOutById: (BeamOutId) -> (Result) query;
}
