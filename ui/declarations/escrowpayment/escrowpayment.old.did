type Tokens = record {e8s: nat64;};
type TokenType__1 = variant {icp;};
type TokenType = variant {icp;};
type TokenAmount__1 = nat64;
type TokenAmount = nat64;
type Time__1 = int;
type Time = int;
type Result_3 = 
 variant {
   err: ErrorCode__1;
   ok: EscrowId;
 };
type Result_2 = 
 variant {
   err: ErrorCode;
   ok: EscrowContract;
 };
type Result_1 = 
 variant {
   err: ErrorCode__1;
   ok: text;
 };
type Result = 
 variant {
   err: ErrorCode;
   ok: text;
 };
type JobFlowId__1 = nat32;
type JobFlowId = nat32;
type EscrowPaymentType__1 = 
 variant {
   beam;
   lumpSum;
 };
type EscrowPaymentType = 
 variant {
   beam;
   lumpSum;
 };
type EscrowId__1 = nat32;
type EscrowId = nat32;
type EscrowContract = 
 record {
   buyerAccountIdentifier: opt AccountIdentifier;
   buyerClaimable: TokenAmount;
   buyerClaimed: TokenAmount;
   buyerPrincipal: principal;
   createdAt: Time;
   creatorAccountIdentifier: opt AccountIdentifier;
   creatorClaimable: TokenAmount;
   creatorClaimed: TokenAmount;
   creatorPrincipal: principal;
   escrowAmount: TokenAmount;
   id: EscrowId__1;
   initialDeposit: TokenAmount;
   jobFlowId: JobFlowId__1;
   paymentType: EscrowPaymentType;
   tokenType: TokenType;
   updatedAt: Time;
 };
type ErrorCode__1 = 
 variant {
   chat_messages_notfound: text;
   duplicated_notifymode: text;
   duplicated_username: text;
   escrow_beam_failed: text;
   escrow_contract_not_found: text;
   escrow_contract_verification_failed: text;
   escrow_payment_not_found: text;
   escrow_token_owned_not_matched: text;
   file_notfound: text;
   image_notfound: text;
   incompleted_job: text;
   invalid_state_change: text;
   job_notfound: text;
   jobflow_has_completed: text;
   jobflow_notfound: text;
   mint_err: text;
   nft_already_claimed: text;
   nft_claim_processing: text;
   nft_token_id_missing: text;
   permission_denied: text;
   plug_connected_other_user: text;
   portfolio_notfound: text;
   signup_maxusers_reached: text;
   signup_noteligible: text;
   signup_reservecutoff: text;
   user_notfound: text;
   user_verification_failed: text;
   usermodel_notfound: text;
   verify_email_failed: text;
   wallet_required: text;
 };
type ErrorCode = 
 variant {
   escrow_contract_not_found: text;
   escrow_contract_verification_failed: text;
   escrow_invalid_access: text;
   escrow_invalid_accountid: text;
   escrow_invalid_allocations: text;
   escrow_invalid_token_type: text;
   escrow_payment_not_found: text;
   escrow_token_owned_not_matched: text;
   escrow_token_transfer_failed: text;
 };
type CanisterMemoryInfo = 
 record {
   rts_heap_size: nat;
   rts_max_live_size: nat;
   rts_memory_size: nat;
   rts_reclaimed: nat;
   rts_total_allocation: nat;
   rts_version: text;
 };
type BlockIndex = nat64;
type BeamEscrowContract = 
 record {
   buyerClaimable: TokenAmount;
   buyerClaimed: TokenAmount;
   buyerPrincipal: principal;
   createdAt: Time;
   creatorClaimable: TokenAmount;
   creatorClaimed: TokenAmount;
   creatorPrincipal: principal;
   escrowAmount: TokenAmount;
   id: EscrowId__1;
   initialDeposit: TokenAmount;
   tokenType: TokenType;
   updatedAt: Time;
 };
type Allocation = nat64;
type AccountIdentifier__1 = blob;
type AccountIdentifier = blob;
service : {
  buyerClaim: (JobFlowId, TokenType__1, AccountIdentifier__1) -> (Result);
  canisterAccount: () -> (AccountIdentifier__1) query;
  canisterBalance: (TokenType__1) -> (Tokens);
  canisterVersion: () -> (nat32) query;
  createBeamEscrow: (TokenAmount__1, BlockIndex, Time__1, principal,
   principal) -> (Result_3);
  createEscrow: (JobFlowId, TokenAmount__1, EscrowPaymentType__1, BlockIndex,
   Time__1, principal, principal) -> (Result_3);
  creatorClaim: (JobFlowId, TokenType__1, AccountIdentifier__1) -> (Result);
  getActorBalance: () -> (nat) query;
  getCanisterMemoryInfo: () -> (CanisterMemoryInfo) query;
  getManager: () -> (principal) query;
  healthCheck: () -> (bool) query;
  loadAllEscrow: () -> (vec EscrowContract) query;
  loadEscrow: (JobFlowId) -> (Result_2) query;
  queryMyBeams: () -> (vec BeamEscrowContract) query;
  releasePaymentToCreator: (JobFlowId) -> (Result);
  returnExtraICP: () -> (Result_1);
  updateEscrowAllocation: (EscrowId, Allocation, Allocation, Allocation) ->
   (Result);
}
